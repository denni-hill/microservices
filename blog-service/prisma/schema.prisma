// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authUserId Int @unique
  firstName String 
  lastName String
  sex Boolean
  isAdmin Boolean @default(false)

  blogs UsersOnBlogs[]
  posts Post[]

  isDeleted Boolean @default(false)

  @@map("users")
}

model Blog {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
  categories Category[]
  authors UsersOnBlogs[]

  isDeleted Boolean @default(false)

  @@map("blogs")
}

model UsersOnBlogs {
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId Int

  blog Blog @relation(fields: [blogId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  blogId Int
  
  @@id([userId, blogId])

  @@map("blogs__users")
}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  authorId Int

  blog Blog @relation(fields: [blogId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  blogId Int

  categories CategoriesOnPosts[]
  comments Comment[]

  isDeleted Boolean @default(false)

  @@map("posts")
}

model Category {
  id Int @id @default(autoincrement())
  name String

  posts CategoriesOnPosts[]

  blog Blog @relation(fields: [blogId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  blogId Int

  @@map("categories")
}

model CategoriesOnPosts {
  post Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId Int

  category Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  categoryId Int

  @@id([postId, categoryId])
  @@map("posts__categories")
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorName String
  content String

  post Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId Int

  isDeleted Boolean @default(false)
  
  @@map("comments")
}