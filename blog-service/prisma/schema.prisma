// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authUserId Int @unique
  firstName String 
  lastName String
  sex Boolean

  posts Post[]
}

model Blog {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
  categories Category[]
}

model Post {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  authorId Int

  blog Blog @relation(fields: [blogId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  blogId Int

  categories CategoriesOnPosts[]
  comments Comment[]
}

model Category {
  id Int @id @default(autoincrement())
  name String

  posts CategoriesOnPosts[]

  blog Blog @relation(fields: [blogId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  blogId Int
}

model CategoriesOnPosts {
  category Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  categoryId Int
  
  post Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId Int

  @@id([categoryId, postId])
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorName String
  content String

  post Post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId Int
}